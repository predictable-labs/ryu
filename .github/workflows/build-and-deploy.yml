name: Build and Deploy
on:
  # schedule:
  #   - cron: "0 8 * * *"

  workflow_dispatch:
    inputs:
      isDeploy:
        description: "Whether the build should be deployed?"
        type: boolean
        required: true
        default: false
      skipBinaries:
        description: "Skip building precompiled binaries?"
        type: boolean
        required: true
        default: false
      skipJava:
        description: "Skip building Java?"
        type: boolean
        required: true
        default: false
      skipNodejs:
        description: "Skip building Node.js?"
        type: boolean
        required: true
        default: false
      skipWasm:
        description: "Skip building WebAssembly?"
        type: boolean
        required: true
        default: false
      skipPython:
        description: "Skip building Python?"
        type: boolean
        required: true
        default: false
      skipRust:
        description: "Skip building Rust?"
        type: boolean
        required: true
        default: false
      skipExtensions:
        description: "Skip building extensions?"
        type: boolean
        required: true
        default: false
      isNightly:
        description: "Whether the build is a nightly build?"
        type: boolean
        required: true
        default: false
env:
  PIP_BREAK_SYSTEM_PACKAGES: 1

jobs:
  get-nightly-version:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        run: |
          python3 -m pip install packaging
          python3 update-nightly-build-version.py | grep "New Python dev version:" | awk -F'New Python dev version: ' '{print $2}' | sed 's/\.$//' > version.txt
          cat version.txt
        working-directory: scripts
      
      - name: Upload version
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: scripts/version.txt

  build-extension:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipExtensions != 'true' }}
    uses: ./.github/workflows/build-and-deploy-extension.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-java-mac:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipJava != 'true' }}
    uses: ./.github/workflows/mac-java-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-java-linux:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipJava != 'true' }}
    uses: ./.github/workflows/linux-java-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-java-windows:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipJava != 'true' }}
    uses: ./.github/workflows/windows-java-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  deploy-java:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipJava != 'true' }}
    needs: [build-java-mac, build-java-linux, build-java-windows]
    env:
      GITHUB_TOKEN: ${{ github.token }}
      GITHUB_ACTOR: ${{ github.actor }}
      GPG_SIGNING_KEY: ${{ secrets.PGP_PRIVATE_KEY }}
      GPG_SIGNING_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
      SKIP_CMAKE_BUILD: true

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
        run: |
          python3 -m pip install packaging
          python3 update-nightly-build-version.py
        working-directory: scripts

      - uses: actions/download-artifact@v4
        with:
          name: java-lib-osx-x86_64
          path: tools/java_api/src/main/resources

      - uses: actions/download-artifact@v4
        with:
          name: java-lib-osx-arm64
          path: tools/java_api/src/main/resources

      - uses: actions/download-artifact@v4
        with:
          name: java-lib-linux-aarch64
          path: tools/java_api/src/main/resources

      - uses: actions/download-artifact@v4
        with:
          name: java-lib-linux-x86_64
          path: tools/java_api/src/main/resources

      - uses: actions/download-artifact@v4
        with:
          name: java-lib-win-x86_64
          path: tools/java_api/src/main/resources
        
      - uses: actions/download-artifact@v4
        with:
          name: java-lib-android-armv8a
          path: tools/java_api/src/main/resources

      - name: Create Java JAR
        working-directory: tools/java_api
        run: |
          ./gradlew build

      - name: Upload Java JAR
        uses: actions/upload-artifact@v4
        with:
          name: ryu-java-multiplatform-jar
          path: tools/java_api/build/libs/ryu*.jar

      - name: Create Maven Central bundle
        working-directory: tools/java_api
        run: |
            ORIGINAL_PWD=$(pwd)
            ./gradlew publishMavenJavaToLocalRepo -i
            cd build/repo
            zip -r ryu-java-bundle.zip com
            mv ryu-java-bundle.zip $ORIGINAL_PWD
      
      - name: Upload Maven Central bundle
        uses: actions/upload-artifact@v4
        with:
          name: ryu-java-multiplatform-bundle
          path: tools/java_api/ryu-java-bundle.zip
      
      - name: Deploy to Maven Central
        if: ${{ github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly != 'true' }}
        working-directory: tools/java_api
        run: |
          curl --request POST \
          --verbose \
          --header 'Authorization: Bearer ${{ secrets.MAVEN_CENTRAL_PORTAL_TOKEN }}' \
          --form bundle=@ryu-java-bundle.zip \
          https://central.sonatype.com/api/v1/publisher/upload?publishingType=AUTOMATIC
        
      - name: Publish to GitHub Packages
        if: ${{ github.event.inputs.isDeploy == 'true' || github.event_name == 'schedule' }}
        working-directory: tools/java_api
        run: |
          ./gradlew publish -i

  build-nodejs-mac:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipNodejs != 'true' }}
    uses: ./.github/workflows/mac-nodejs-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-nodejs-linux:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipNodejs != 'true' }}
    uses: ./.github/workflows/linux-nodejs-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-nodejs-windows:
    if: ${{ github.event_name == 'schedule' ||  github.event.inputs.skipNodejs != 'true' }}
    uses: ./.github/workflows/windows-nodejs-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  deploy-nodejs:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipNodejs != 'true' }}
    needs: [build-nodejs-mac, build-nodejs-linux, build-nodejs-windows]
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_JS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
        run: |
          pip3 install packaging
          python3 update-nightly-build-version.py
        working-directory: scripts

      - name: Create prebuilt folder
        run: mkdir -p tools/nodejs_api/prebuilt

      - uses: actions/download-artifact@v4
        with:
          name: mac-nodejs-module-arm64
          path: tools/nodejs_api/prebuilt

      - uses: actions/download-artifact@v4
        with:
          name: mac-nodejs-module-x86_64
          path: tools/nodejs_api/prebuilt

      - uses: actions/download-artifact@v4
        with:
          name: linux-nodejs-module-x86_64
          path: tools/nodejs_api/prebuilt

      - uses: actions/download-artifact@v4
        with:
          name: linux-nodejs-module-aarch64
          path: tools/nodejs_api/prebuilt

      - uses: actions/download-artifact@v4
        with:
          name: windows-nodejs-module
          path: tools/nodejs_api/prebuilt

      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"

      - name: Package Node.js API with prebuilt binaries
        run: node package
        working-directory: tools/nodejs_api

      - name: Show tarball contents
        run: tar -tvf ryu-source.tar.gz
        working-directory: tools/nodejs_api

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: ryu-deploy-nodejs
          path: tools/nodejs_api/ryu-source.tar.gz

      - name: Deploy to npm.js dry run
        if: ${{ github.event_name != 'schedule' && github.event.inputs.isDeploy != 'true' }}
        run: npm publish ryu-source.tar.gz --access public --dry-run
        working-directory: tools/nodejs_api

      - name: Deploy nightly to npm.js
        if: ${{ github.event_name == 'schedule' || (github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly == 'true') }}
        run: npm publish ryu-source.tar.gz --access public --tag next
        working-directory: tools/nodejs_api

      - name: Deploy to npm.js
        if: ${{ github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly != 'true' }}
        run: npm publish ryu-source.tar.gz --access public --tag latest
        working-directory: tools/nodejs_api
  
  build-wasm:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipWasm != 'true' }}
    uses: ./.github/workflows/wasm-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit
  
  deploy-wasm:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipWasm != 'true' }}
    needs: [build-wasm]
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_JS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ryu-deploy-wasm
          path: tools/wasm

      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Show tarball contents
        run: tar -tvf ryu-wasm.tar.gz
        working-directory: tools/wasm

      - name: Deploy to npm.js dry run
        if: ${{ github.event_name != 'schedule' && github.event.inputs.isDeploy != 'true' }}
        run: npm publish ryu-wasm.tar.gz --access public --dry-run
        working-directory: tools/wasm

      - name: Deploy nightly to npm.js
        if: ${{ github.event_name == 'schedule' || (github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly == 'true') }}
        run: npm publish ryu-wasm.tar.gz --access public --tag next
        working-directory: tools/wasm

      - name: Deploy to npm.js
        if: ${{ github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly != 'true' }}
        run: npm publish ryu-wasm.tar.gz --access public --tag latest
        working-directory: tools/wasm

  build-wheel-mac:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipPython != 'true' }}
    uses: ./.github/workflows/mac-wheel-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-wheel-linux:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipPython != 'true' }}
    uses: ./.github/workflows/linux-wheel-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-wheel-windows:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipPython != 'true' }}
    uses: ./.github/workflows/windows-wheel-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  package-python-sdist:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipPython != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
        run: |
          pip3 install packaging
          python3 update-nightly-build-version.py
        working-directory: scripts

      - name: Package Python sdist
        run: python package_tar.py
        working-directory: scripts/pip-package

      - name: Upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: python-sdist
          path: scripts/pip-package/*.tar.gz

  deploy-python:
    permissions:
      id-token: write
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipPython != 'true' }}
    needs:
      [
        build-wheel-mac,
        build-wheel-linux,
        build-wheel-windows,
        package-python-sdist,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: macos-wheels-arm64
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: macos-wheels-x86_64
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: linux-wheels-x86_64
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: linux-wheels-aarch64
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: windows-wheels
          path: dist

      - uses: actions/download-artifact@v4
        with:
          name: python-sdist
          path: dist

      - name: List wheels
        run: ls -l
        working-directory: dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ryu-deploy-wheels
          path: dist/*

      - name: Deploy to PyPI test
        if: ${{ github.event_name != 'schedule' && github.event.inputs.isDeploy != 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Deploy to PyPI
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isDeploy == 'true' }}
        uses: pypa/gh-action-pypi-publish@release/v1
        
  deploy-rust:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipRust != 'true' }}
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
        run: |
          pip3 install packaging
          python3 update-nightly-build-version.py
        working-directory: scripts

      - name: Update Cargo.toml version
        run: python3 update_version.py
        working-directory: tools/rust_api

      - name: Deploy crate to Crates.io
        run: cargo publish --allow-dirty
        if: ${{ github.event.inputs.isDeploy == 'true' }}
        working-directory: tools/rust_api

      - name: Test publishing crate
        run: cargo publish --dry-run --allow-dirty
        if: ${{ github.event.inputs.isDeploy != 'true' }}
        working-directory: tools/rust_api

      - name: Upload crate
        uses: actions/upload-artifact@v4
        with:
          name: ryu-deploy-crate
          path: tools/rust_api/target/package/*.crate

  build-precompiled-bin-mac:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipBinaries != 'true' }}
    uses: ./.github/workflows/mac-precompiled-bin-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-precompiled-bin-linux:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipBinaries != 'true' }}
    uses: ./.github/workflows/linux-precompiled-bin-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  build-precompiled-bin-windows:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipBinaries != 'true' }}
    uses: ./.github/workflows/windows-precompiled-bin-workflow.yml
    with:
      isNightly: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
    secrets: inherit

  deploy-precompiled-binaries:
    if: ${{ github.event_name == 'schedule' || github.event.inputs.skipBinaries != 'true' }}
    needs: [build-precompiled-bin-mac, build-precompiled-bin-linux, build-precompiled-bin-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Update nightly version
        if: ${{ github.event_name == 'schedule' || github.event.inputs.isNightly == 'true' }}
        run: |
          pip3 install packaging
          python3 update-nightly-build-version.py
        working-directory: scripts

      - name: Get version
        id: version
        run: |
          VERSION=$(cat CMakeLists.txt | grep "project(Ryu VERSION" | cut -d ' ' -f 3 | cut -d ')' -f 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Download all binary artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: List downloaded artifacts
        run: ls -R release-artifacts

      - name: Prepare release archives
        run: |
          cd release-artifacts

          # Create Windows archives (individual files need to be zipped)
          cd libryu-windows-x86_64
          zip -r libryu-windows-x86_64.zip ryu.h ryu.hpp ryu_shared.dll ryu_shared.lib
          cd ..

          cd ryu_cli-windows-x86_64
          zip ryu_cli-windows-x86_64.zip ryu.exe
          cd ..

          cd ..

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ryu-precompiled-binaries
          path: release-artifacts

      - name: Create or update GitHub Release
        if: ${{ github.event.inputs.isDeploy == 'true' && github.event.inputs.isNightly != 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="v${{ steps.version.outputs.version }}"

          # Check if release exists
          if gh release view $VERSION >/dev/null 2>&1; then
            echo "Release $VERSION exists, uploading assets..."
            RELEASE_CMD="gh release upload $VERSION --clobber"
          else
            echo "Creating new release $VERSION..."
            gh release create $VERSION \
              --title "Ryu $VERSION" \
              --notes "Release $VERSION of Ryu Graph Database" \
              --draft=false \
              --latest
            RELEASE_CMD="gh release upload $VERSION"
          fi

          # Upload library tarballs
          $RELEASE_CMD release-artifacts/libryu-linux-x86_64/libryu-linux-x86_64.tar.gz
          $RELEASE_CMD release-artifacts/libryu-linux-aarch64/libryu-linux-aarch64.tar.gz
          $RELEASE_CMD release-artifacts/libryu-android-armv8a/libryu-android-armv8a.tar.gz
          $RELEASE_CMD release-artifacts/libryu-osx-universal/libryu-osx-universal.tar.gz

          # Upload CLI tarballs
          $RELEASE_CMD release-artifacts/ryu_cli-linux-x86_64/ryu_cli-linux-x86_64.tar.gz
          $RELEASE_CMD release-artifacts/ryu_cli-linux-aarch64/ryu_cli-linux-aarch64.tar.gz
          $RELEASE_CMD release-artifacts/ryu_cli-android-armv8a/ryu_cli-android-armv8a.tar.gz
          $RELEASE_CMD release-artifacts/ryu_cli-osx-universal/ryu_cli-osx-universal.tar.gz

          # Upload Windows zips
          $RELEASE_CMD release-artifacts/libryu-windows-x86_64/libryu-windows-x86_64.zip
          $RELEASE_CMD release-artifacts/ryu_cli-windows-x86_64/ryu_cli-windows-x86_64.zip

          echo "Release $VERSION published successfully!"
