name: 'Install DuckDB'
description: 'Install DuckDB library and headers for building extensions'
runs:
  using: 'composite'
  steps:
    - name: Cache DuckDB (Linux)
      if: runner.os == 'Linux'
      id: cache-duckdb-linux
      uses: actions/cache@v4
      with:
        path: /tmp/duckdb-install
        key: duckdb-v1.1.3-linux-${{ runner.arch }}

    - name: Check if DuckDB is already installed (Linux)
      if: runner.os == 'Linux'
      id: check-duckdb-linux
      shell: bash
      run: |
        if [ -f /usr/local/lib/libduckdb.so ] && [ -f /usr/local/include/duckdb.h ]; then
          echo "DuckDB is already installed on self-hosted runner"
          echo "already_installed=true" >> $GITHUB_OUTPUT
        else
          echo "DuckDB not found, will install"
          echo "already_installed=false" >> $GITHUB_OUTPUT
        fi

    - name: Build DuckDB (Linux)
      if: runner.os == 'Linux' && steps.check-duckdb-linux.outputs.already_installed != 'true' && steps.cache-duckdb-linux.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Build DuckDB from source to ensure ABI compatibility
        # Clean up any existing directory from previous runs
        rm -rf /tmp/duckdb-src
        git clone --depth 1 --branch v1.1.3 https://github.com/duckdb/duckdb.git /tmp/duckdb-src
        cd /tmp/duckdb-src
        mkdir build && cd build
        # Use gcc/g++ explicitly for DuckDB build (more widely available)
        CC=gcc CXX=g++ cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_UNITTESTS=0 -DBUILD_SHELL=0 ..
        make -j$(nproc) duckdb
        # Save to cache directory
        mkdir -p /tmp/duckdb-install/lib /tmp/duckdb-install/include
        cp src/libduckdb.so /tmp/duckdb-install/lib/
        cp ../src/include/duckdb.h /tmp/duckdb-install/include/
        cp ../src/include/duckdb.hpp /tmp/duckdb-install/include/
        cp -r ../src/include/duckdb /tmp/duckdb-install/include/
        cd ~ && rm -rf /tmp/duckdb-src

    - name: Install DuckDB from cache (Linux)
      if: runner.os == 'Linux' && steps.check-duckdb-linux.outputs.already_installed != 'true'
      shell: bash
      run: |
        # Ensure the cache directory exists and has correct permissions
        sudo mkdir -p /tmp/duckdb-install/lib /tmp/duckdb-install/include
        sudo chmod -R 755 /tmp/duckdb-install
        sudo cp /tmp/duckdb-install/lib/libduckdb.so /usr/local/lib/
        sudo cp /tmp/duckdb-install/include/duckdb.h /usr/local/include/
        sudo cp /tmp/duckdb-install/include/duckdb.hpp /usr/local/include/
        sudo cp -r /tmp/duckdb-install/include/duckdb /usr/local/include/
        sudo ldconfig

    - name: Cache DuckDB (macOS)
      if: runner.os == 'macOS'
      id: cache-duckdb-macos
      uses: actions/cache@v4
      with:
        path: /tmp/duckdb-install
        key: duckdb-v1.1.3-macos-universal

    - name: Download DuckDB (macOS)
      if: runner.os == 'macOS' && steps.cache-duckdb-macos.outputs.cache-hit != 'true'
      shell: bash
      run: |
        wget -q https://github.com/duckdb/duckdb/releases/download/v1.1.3/libduckdb-osx-universal.zip
        unzip -q libduckdb-osx-universal.zip -d /tmp/duckdb-install
        rm libduckdb-osx-universal.zip

    - name: Install DuckDB from cache (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        mkdir -p $HOME/duckdb/include
        mkdir -p $HOME/duckdb/lib
        cp /tmp/duckdb-install/duckdb.h $HOME/duckdb/include/
        cp /tmp/duckdb-install/duckdb.hpp $HOME/duckdb/include/
        cp /tmp/duckdb-install/libduckdb.dylib $HOME/duckdb/lib/
        echo "DuckDB_DIR=$HOME/duckdb" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$HOME/duckdb/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Cache DuckDB (Windows)
      if: runner.os == 'Windows'
      id: cache-duckdb-windows
      uses: actions/cache@v4
      with:
        path: C:\duckdb-cache
        key: duckdb-v1.1.3-windows-amd64

    - name: Download DuckDB (Windows)
      if: runner.os == 'Windows' && steps.cache-duckdb-windows.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Download both shared and static libraries
        Invoke-WebRequest -Uri "https://github.com/duckdb/duckdb/releases/download/v1.1.3/libduckdb-windows-amd64.zip" -OutFile "libduckdb-windows-amd64.zip"
        Expand-Archive -Path "libduckdb-windows-amd64.zip" -DestinationPath "C:\duckdb-cache"
        Remove-Item "libduckdb-windows-amd64.zip"
        # Also download static library if available
        Invoke-WebRequest -Uri "https://github.com/duckdb/duckdb/releases/download/v1.1.3/duckdb_cli-windows-amd64.zip" -OutFile "duckdb_cli.zip" -ErrorAction SilentlyContinue
        if (Test-Path "duckdb_cli.zip") { Remove-Item "duckdb_cli.zip" }

    - name: Install DuckDB from cache (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path "C:\Program Files\duckdb\include"
        New-Item -ItemType Directory -Force -Path "C:\Program Files\duckdb\lib"
        Copy-Item "C:\duckdb-cache\duckdb.h" -Destination "C:\Program Files\duckdb\include\" -Force
        Copy-Item "C:\duckdb-cache\duckdb.hpp" -Destination "C:\Program Files\duckdb\include\" -Force
        Copy-Item "C:\duckdb-cache\duckdb.dll" -Destination "C:\Program Files\duckdb\lib\" -Force
        Copy-Item "C:\duckdb-cache\duckdb.lib" -Destination "C:\Program Files\duckdb\lib\" -Force
        # Set both CMAKE_PREFIX_PATH and DuckDB_DIR for FindDuckDB.cmake
        echo "CMAKE_PREFIX_PATH=C:\Program Files\duckdb" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "DuckDB_DIR=C:\Program Files\duckdb" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
